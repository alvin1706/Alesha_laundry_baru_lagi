/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.raven.form;
import Connection.DatabaseConnection;
import com.raven.table.TableCustom;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MUTIARA
 */
public class Form_DataSelesai extends javax.swing.JPanel {

    /**
     * Creates new form Form_DataSelesai
     */
    public Form_DataSelesai() {
        initComponents();
        TableCustom.apply(Scroll, TableCustom.TableType.DEFAULT);
        TableCustom.apply(scroll, TableCustom.TableType.DEFAULT);
        loadMainTable();
        loadSecondTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Scroll = new javax.swing.JScrollPane();
        MainTable = new javax.swing.JTable();
        scroll = new javax.swing.JScrollPane();
        SecondTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        scanText = new javax.swing.JTextField();

        setBackground(new java.awt.Color(182, 234, 234));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Data Selesai");
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Belum Diambil");
        jLabel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));

        MainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "KODE", "NAMA", "NO HP", "TANGGAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Scroll.setViewportView(MainTable);

        SecondTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "KODE", "NAMA", "NO HP", "TANGGA;"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll.setViewportView(SecondTable);

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Telah Diambil");
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));

        scanText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 1032, Short.MAX_VALUE)
                            .addComponent(scroll)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(16, 16, 16))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scanText, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scanText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void updateStatusSelesai() {
        int selectedRow = MainTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Silakan pilih transaksi terlebih dahulu.");
            return;
        }

        String kodeTransaksi = MainTable.getValueAt(selectedRow, 0).toString(); // Mengambil kode transaksi dari MainTable

        String query = "UPDATE transaksi SET status = 'diambil' WHERE kode = ?";

        try {
            PreparedStatement ps = DatabaseConnection.getConn().prepareStatement(query);
            ps.setString(1, kodeTransaksi);

            int rowsAffected = ps.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Status transaksi telah diperbarui menjadi Telah Diambil.");
                
                loadMainTable(); 
            } else {
                JOptionPane.showMessageDialog(this, "Gagal memperbarui status. Mungkin transaksi sudah selesai.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error saat mengupdate status transaksi: " + e.getMessage());
        }
    }
    public void loadMainTable() {
        String query = "SELECT t.kode, p.nama AS nama_pelanggan, p.no_hp, t.tanggal, t.status " +
               "FROM transaksi t " +
               "JOIN pelanggan p ON t.id_pelanggan = p.id " +
               "WHERE t.status = 'selesai'";

        DefaultTableModel mainTableModel = (DefaultTableModel) MainTable.getModel();
        mainTableModel.setRowCount(0); 

        try {
            ResultSet rs = DatabaseConnection.getData(query);

            while (rs.next()) {
                String kode = rs.getString("kode");
                String namaPelanggan = rs.getString("nama_pelanggan");
                String noHp = rs.getString("no_hp");
                String tanggal = rs.getString("tanggal");
                String status = rs.getString("status");

                mainTableModel.addRow(new Object[]{kode, namaPelanggan, noHp, tanggal, status});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error saat memuat data transaksi: " + e.getMessage());
        }
    }

    public void loadSecondTable() {
        String query = "SELECT t.kode, p.nama AS nama_pelanggan, p.no_hp, t.tanggal, t.status " +
               "FROM transaksi t " +
               "JOIN pelanggan p ON t.id_pelanggan = p.id " +
               "WHERE t.status = 'diambil'";

        DefaultTableModel mainTableModel = (DefaultTableModel) SecondTable.getModel();
        mainTableModel.setRowCount(0); 

        try {
            ResultSet rs = DatabaseConnection.getData(query);

            while (rs.next()) {
                String kode = rs.getString("kode");
                String namaPelanggan = rs.getString("nama_pelanggan");
                String noHp = rs.getString("no_hp");
                String tanggal = rs.getString("tanggal");
                String status = rs.getString("status");

                mainTableModel.addRow(new Object[]{kode, namaPelanggan, noHp, tanggal, status});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error saat memuat data transaksi: " + e.getMessage());
        }
    }
    private void scanTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanTextActionPerformed
       try {
            String sql = "SELECT status FROM transaksi WHERE kode=?";
            PreparedStatement preparedStatement = DatabaseConnection.getConn().prepareStatement(sql);
            preparedStatement.setString(1, scanText.getText());
            ResultSet result = preparedStatement.executeQuery();

            if (result.next()) {
                String status = result.getString("status");

                if (status.equals("selesai")) {
                    String query = "UPDATE transaksi SET status = 'diambil', tanggal_diambil = NOW() WHERE kode = ?";
                    try {
                        PreparedStatement ps = DatabaseConnection.getConn().prepareStatement(query);
                        ps.setString(1, scanText.getText());

                        int rowsAffected = ps.executeUpdate();

                        if (rowsAffected > 0) {
                            // Ambil keterangan setelah update berhasil
                            String ketQuery = "SELECT keterangan FROM transaksi WHERE kode = ?";
                            PreparedStatement ketStmt = DatabaseConnection.getConn().prepareStatement(ketQuery);
                            ketStmt.setString(1, scanText.getText());
                            ResultSet ketResult = ketStmt.executeQuery();

                            String keterangan = "";
                            if (ketResult.next()) {
                                keterangan = ketResult.getString("keterangan");
                            }

                            JOptionPane.showMessageDialog(this,
                                "Status transaksi telah diperbarui menjadi Telah Diambil.\nKeterangan: " + keterangan);

                            loadMainTable();
                            loadSecondTable();
                        } else {
                            JOptionPane.showMessageDialog(this, "Gagal memperbarui status. Mungkin transaksi sudah selesai.");
                        }
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, "Error saat mengupdate status transaksi: " + e.getMessage());
                    }
                } else if (status.equals("proses")) {
                    JOptionPane.showMessageDialog(this, "Proses Laundry Belum Selesai");
                } else {
                    JOptionPane.showMessageDialog(this, "Laundry Telah Diambil");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Kode Transaksi Tidak Ditemukan");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Terjadi error: " + e.getMessage());
        }

    }//GEN-LAST:event_scanTextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MainTable;
    private javax.swing.JScrollPane Scroll;
    private javax.swing.JTable SecondTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField scanText;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables
}
